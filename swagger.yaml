openapi: 3.0.3
info:
  title: YOOGI APIS DOCS
  description: This is a sample APIS doc for the Yoogi app consisting of the ADMIN and CUSTOMER End points

servers:
  - url: http://localhost:8080/api/v1
  - url: https://yoogi-app.onrender.com/api/v1
  # - url: https://yoogi.cyclic.app/api/v1

tags:
  - name: ADMIN
    description: All endpoints about ADMIN
  - name: CUSTOMER
    description: All endpoints about CUSTOMER
paths:
  ###### CUSTOMER
  /users/register:
    post:
      tags:
        - CUSTOMER
      summary: New user  Registration.
      description: sign up for new account .
      requestBody:
        description: Creating a new user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerAuth"
          application/xml:
            schema:
              $ref: "#/components/schemas/CustomerAuth"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/CustomerAuth"
        required: true
      responses:
        "200": # status code
          description: New user created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400": # status code
          description: E-mail is incorrect
          content:
            application/json:
              schema:
                type": string
                example: E-mail  is incorrect
  /users/login:
    post:
      tags:
        - CUSTOMER
      summary: Customer login.
      description: sign in for an existing account.
      requestBody:
        description: login
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerAuth"
          application/xml:
            schema:
              $ref: "#/components/schemas/CustomerAuth"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/CustomerAuth"
        required: true
      responses:
        "200": # status code
          description: logged in successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400": # status code
          description: phone number is incorrect
          content:
            application/json:
              schema:
                type": string
                example: email or password is incorrect
  /users/password-reset:
    post:
      tags:
        - CUSTOMER
      summary: Reset password using email.
      description: Reset your password.
      requestBody:
        description: give existing email to reset password
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerAuth"
          application/xml:
            schema:
              $ref: "#/components/schemas/CustomerAuth"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/CustomerAuth"
        required: true
      responses:
        "200": # status code
          description: success operation.. Kindly check your email.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400": # status code
          description: email not  exists
          content:
            application/json:
              schema:
                type": string
                example: email not exists.
  /users/verify-reset-code:
    post:
      tags:
        - CUSTOMER
      summary: Verify reset password code .
      description: Verify reset password code.
      requestBody:
        description: Verify reset password code .
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyCOde"
          application/xml:
            schema:
              $ref: "#/components/schemas/VerifyCOde"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/VerifyCOde"
        required: true
      responses:
        "200": # status code
          description: success operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerifyCOdeExample"
        "400": # status code
          description: email not  exists
          content:
            application/json:
              schema:
                type": string
                example: email not exists.
  /users/new-password:
    post:
      tags:
        - CUSTOMER
      summary: Enter new password  .
      description: Enter new password.
      requestBody:
        description: Enter new password, code, or user id  .
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewPassword"
          application/xml:
            schema:
              $ref: "#/components/schemas/NewPassword"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/NewPassword"
        required: true
      responses:
        "200": # status code
          description: Dear user, your password changed successfully
        "400": # status code
          description: email not  exists
          content:
            application/json:
              schema:
                type": string
                example: email not exists.
  /users/upload-multiple:
    post:
      tags:
        - CUSTOMER
      summary: Upload multiple files - upto 10 files max.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        "200": # status code
          description: '["url" = "https://es.....s.s3.amazonaws.com/16631...00728","url" = "https://es.....s.s3.amazonaws.com/16631...00728"]'

        "400": # status code
          description: Please upload a file!
  /users/upload:
    post:
      tags:
        - CUSTOMER
      summary: Uploads a file.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200": # status code
          description: '{ "url" = "https://es.....s.s3.amazonaws.com/16631...00728" }'

        "400": # status code
          description: Please upload a file
  /users/user-profile:
    get:
      tags:
        - CUSTOMER
      summary: get customer profile.
      description: Token required.
      responses:
        "200": # status code
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        "403": # status code
          description: UnAuthorized Acess Denied
      security:
        - BearerAuth: []
  /users/profile/update:
    put:
      tags:
        - CUSTOMER
      summary: Update Profile
      description: User Specific .
      requestBody:
        description: Update Your Profile
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200": # status code
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        "400": # status code
          description: Invalid Email
          content:
            application/json:
              schema:
                type: string
                example: \"email\" must be a valid email
        "403": # status code
          description: UnAuthorized Acess Denied
      security:
        - BearerAuth: []
  /users/account-type/{id}:
    put:
      tags:
        - CUSTOMER
      summary: Edit user
      description: call this api to edit user
      parameters:
        - name: id
          in: path
          description: id is required
          required: true
          schema:
            type: string
      requestBody:
        description: Edit user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/xml:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        default:
          description: successful operation
  /users/group:
    post:
      tags:
        - CUSTOMER
      summary: Add new Group
      description: Call this api to add new Group.
      operationId: createGroup
      requestBody:
        description: Creating a new Group
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Group"
          application/xml:
            schema:
              $ref: "#/components/schemas/Group"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Group"
        required: true
      responses:
        "200": # status code
          description: This return the created Group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        "400": # status code
          description: Group already exist.

        "403": # status code
          description: UnAuthorized Acess Denied
    get:
      tags:
        - CUSTOMER
      summary: view all groups.
      description: call this api to view all groups.
      responses:
        "200": # status code
          description: return array of groups
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        "400": # status code
          description: UnAuthorized Access Denied
  /users/group/{id}/members:
    get:
      tags:
        - CUSTOMER
      summary: View members of the group.
      description: call this api to view members of the group.
      parameters:
        - name: id
          in: path
          description: Group id is required
          required: true
          schema:
            type: string
            example: 631b0b88970b8b1d149f61d6
      responses:
        default:
          description: successful operation
  /users/group/{id}:
    get:
      tags:
        - CUSTOMER
      summary: View  single group detail
      description: call this api to view  single group detail
      parameters:
        - name: id
          in: path
          description: Group id is required
          required: true
          schema:
            type: string
            example: 631b0b88970b8b1d149f61d6
      responses:
        default:
          description: successful operation
    put:
      tags:
        - CUSTOMER
      summary: Edit group
      description: call this api to edit group
      parameters:
        - name: id
          in: path
          description: id is required
          required: true
          schema:
            type: string
      requestBody:
        description: Edit group
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Group"
          application/xml:
            schema:
              $ref: "#/components/schemas/Group"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Group"
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - CUSTOMER
      summary: delete group
      description: call this api to delete group
      parameters:
        - name: id
          in: path
          description: id is required
          required: true
          schema:
            type: string
            example: 631b0b88970b8b1d149f61d6
      responses:
        default:
          description: successful operation
  /users/group-added/{id}:
    get:
      tags:
        - CUSTOMER
      summary: View all groups details in which user is added
      description: call this api to view group details in which user is added by id.
      parameters:
        - name: id
          in: path
          description: id is required
          required: true
          schema:
            type: string
            example: 631b0b88970b8b1d149f61d6
      responses:
        default:
          description: successful operation
  /users/group/{id}/add-members:
    post:
      tags:
        - CUSTOMER
      summary: Add members in the list
      description: call this api to Add members in the list of group
      parameters:
        - name: id
          in: path
          description: Group id is required
          required: true
          schema:
            type: string
      requestBody:
        description: add member ids
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddRemoveExample"
          application/xml:
            schema:
              $ref: "#/components/schemas/AddRemoveExample"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/AddRemoveExample"
      responses:
        default:
          description: successful operation
  /users/group/{id}/remove-members:
    post:
      tags:
        - CUSTOMER
      summary: Remove member from the list
      description: call this api to remove member from the list of group
      parameters:
        - name: id
          in: path
          description: Group id is required
          required: true
          schema:
            type: string
      requestBody:
        description: Remove member ids
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddRemoveExample"
          application/xml:
            schema:
              $ref: "#/components/schemas/AddRemoveExample"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/AddRemoveExample"
      responses:
        default:
          description: successful operation
  /users/group-open/{id}:
    get:
      tags:
        - CUSTOMER
      summary: open group details and see all participants and collections in that group.
      description: call this api to open group details
      parameters:
        - name: id
          in: path
          description: id is required
          required: true
          schema:
            type: string
            example: 631b0b88970b8b1d149f61d6
      responses:
        default:
          description: successful operation

  /collections/add-collection:
    post:
      tags:
        - CUSTOMER
      summary: Add new collection
      description: Call this api to add new collection.
      operationId: createCollection
      requestBody:
        description: Creating a new collection
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Collection"
          application/xml:
            schema:
              $ref: "#/components/schemas/Collection"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Collection"
        required: true
      responses:
        "200": # status code
          description: This return the created collection
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
        "400": # status code
          description: Collection already exist.

        "403": # status code
          description: UnAuthorized Acess Denied
  /collections/view-collections:
    get:
      tags:
        - CUSTOMER
      summary: view all collections.
      description: call this api to view all collections.
      responses:
        "200": # status code
          description: return array of collections
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
        "400": # status code
          description: UnAuthorized Access Denied
  /collections/collection/{id}:
    get:
      tags:
        - CUSTOMER
      summary: View collection details
      description: call this api to view collection details
      parameters:
        - name: id
          in: path
          description: id is required
          required: true
          schema:
            type: string
            example: 631b0b88970b8b1d149f61d6
      responses:
        default:
          description: successful operation
    put:
      tags:
        - CUSTOMER
      summary: Edit collection
      description: call this api to edit collection
      parameters:
        - name: id
          in: path
          description: id is required
          required: true
          schema:
            type: string
      requestBody:
        description: Edit collection
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Collection"
          application/xml:
            schema:
              $ref: "#/components/schemas/Collection"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Collection"
      responses:
        default:
          description: successful operation
  /users/file:
    post:
      tags:
        - CUSTOMER
      summary: Add new file
      description: Call this api to add new file.
      requestBody:
        description: Creating a new file
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/File"
          application/xml:
            schema:
              $ref: "#/components/schemas/File"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/File"
        required: true
      responses:
        "200": # status code
          description: This return the created file.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/File"
        "400": # status code
          description: File already exist.

        "403": # status code
          description: UnAuthorized Acess Denied
    get:
      tags:
        - CUSTOMER
      summary: view all collections.
      description: call this api to view all files.
      responses:
        "200": # status code
          description: return array of files
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/File"
        "400": # status code
          description: UnAuthorized Access Denied
  /users/file/{id}:
    get:
      tags:
        - CUSTOMER
      summary: View file details
      description: call this api to view file details
      parameters:
        - name: id
          in: path
          description: id is required
          required: true
          schema:
            type: string
            example: 631b0b88970b8b1d149f61d6
      responses:
        default:
          description: successful operation
    put:
      tags:
        - CUSTOMER
      summary: Edit file
      description: call this api to edit file
      parameters:
        - name: id
          in: path
          description: id is required
          required: true
          schema:
            type: string
      requestBody:
        description: Edit file
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/File"
          application/xml:
            schema:
              $ref: "#/components/schemas/File"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/File"
      responses:
        default:
          description: successful operation
  /users/tag:
    post:
      tags:
        - CUSTOMER
      summary: Add new tag
      description: Call this api to add new tag.
      operationId: createGroup
      requestBody:
        description: Creating a new tag
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tag"
          application/xml:
            schema:
              $ref: "#/components/schemas/Tag"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Tag"
        required: true
      responses:
        "201": # status code
          description: This return the created tag.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
        "400": # status code
          description: Tag already exist.

        "403": # status code
          description: UnAuthorized Acess Denied
    get:
      tags:
        - CUSTOMER
      summary: view all Tags.
      description: call this api to view all Tags.
      responses:
        "200": # status code
          description: return array of tags
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
        "400": # status code
          description: UnAuthorized Access Denied

  /users/tag-user/{id}:
    get:
      tags:
        - CUSTOMER
      summary: View tag details by user
      description: call this api to view tag details by user.
      parameters:
        - name: id
          in: path
          description: user id is required
          required: true
          schema:
            type: string
            example: 631b0b88970b8b1d149f61d6
      responses:
        default:
          description: successful operation
  /users/tag/{id}:
    get:
      tags:
        - CUSTOMER
      summary: View tag details
      description: call this api to view tag details.
      parameters:
        - name: id
          in: path
          description: id is required
          required: true
          schema:
            type: string
            example: 631b0b88970b8b1d149f61d6
      responses:
        default:
          description: successful operation
    put:
      tags:
        - CUSTOMER
      summary: Edit file
      description: call this api to edit tag
      parameters:
        - name: id
          in: path
          description: id is required
          required: true
          schema:
            type: string
      requestBody:
        description: Edit tag
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tag"
          application/xml:
            schema:
              $ref: "#/components/schemas/Tag"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Tag"
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - CUSTOMER
      summary: delete tag
      description: call this api to delete tag
      parameters:
        - name: id
          in: path
          description: id is required
          required: true
          schema:
            type: string
            example: 631b0b88970b8b1d149f61d6
      responses:
        default:
          description: successful operation
  /users/user-list:
    get:
      tags:
        - CUSTOMER
      summary: view all  users.
      description: call this api to view all  users.
      responses:
        "200": # status code
          description: return array of  users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400": # status code
          description: UnAuthorized Access Denied
components:
  schemas:
    CustomerAuth:
      type: object
      properties:
        email:
          type: string
          example: john@gmail.com
        password:
          type: string
          example: a*************
        name:
          type: string
          example: abc
    AddRemoveExample:
      type: object
      properties:
        newMembers:
          type: string
          example: ["63c138d2ce83161c6a418392", "63dba3674fed585fc5a542a5"]
        memberToRemove:
          type: string
          example: 63c138d2ce83161c6a418392
    VerifyCOde:
      type: object
      properties:
        code:
          type: string
          example: 1122
    VerifyCOdeExample:
      type: object
      properties:
        code:
          type: string
          example: 1122
        token:
          type: string
          example: yJhbGciOiJIUzI1Ni.....zDWo1PgegvWGHZG1w83o
    NewPassword:
      type: object
      properties:
        password:
          type: string
          example: a******
        confirmPassword:
          type: string
          example: a******
        code:
          type: string
          example: 1122
        userId:
          type: string
          example: zDWo1PgegvWGHZG1w83o
    User:
      type: object
      properties:
        name:
          type: string
          example: john
        email:
          type: string
          example: john@example.com
        password:
          type: string
        accountType:
          type: String,
          example: Business
        _id:
          type: string
          example: "63230a0e5308eed7ee4c86a9"
        createdAt:
          type: string
          example: "2022-09-15T11:18:39.002Z"
        updatedAt:
          type: string
          example: "2022-09-15T11:18:39.002Z"
        image:
          type: string
          example: " "
    Group:
      type: object
      properties:
        groupName:
          type: string
          example: myGrandson
        profile:
          type: string
          example: john.jpg
        cover:
          type: string
          example: john.jpg
        groupMaker:
          type: string
          example: "639afc064094b2067f836735"
        groupOwner:
          type: array
          example: ["639afc064094b2067f836735", "639afc064094b2067f836735"]
        addMember:
          type: array
          example: ["639afc064094b2067f836735", "639afc064094b2067f836735"]

    Collection:
      type: object
      properties:
        collectionName:
          type: string
          example: myGrandson
        profile:
          type: string
          example: abc.jpg
        cover:
          type: string
          example: background.jpg
        tags:
          type: array
          example: ["639afc064094b2067f836735", "639afc064094b2067f836735"]
        group:
          type: array
          example: ["639afc064094b2067f836735", "639afc064094b2067f836735"]
        collectionOwner:
          type: string
          example: "639afc064094b2067f836735"
        shareCollection:
          type: array
          example: ["639afc064094b2067f836735", "639afc064094b2067f836735"]
        schedule:
          type: object
          properties:
            time:
              type: string
              example: "10:00:00"
            date:
              type: string
              example: "2023-02-07"
        share:
          type: boolean
          example: false
    File:
      type: object
      properties:
        fileName:
          type: string
          example: myGrandson
        fileType:
          type: string
          example: phote
        path:
          type: string
          example: abc.jpg
        status:
          type: string
          enum: { active, deleted }
          default: "active"
        description:
          type: string
          example: Description related to file
        schedule:
          type: object
          properties:
            time:
              type: string
              example: "10:00:00"
            date:
              type: string
              example: "2023-02-07"
        fileOwner:
          type: string
          example: "639afc064094b2067f836735"
        tags:
          type: array
          example: ["639afc064094b2067f836735", "639afc064094b2067f836735"]
        where:
          type: array
          example: ["639afc064094b2067f836735", "639afc064094b2067f836735"]
        # shareWith:
        #   type: string
        #   description: "Enter the e-mails"
        #   example: [faheem@gmail.com, ali@gmail.com]

    Tag:
      type: object
      properties:
        name:
          type: string
          example: Business, Eduction, Private
    Category:
      type: object
      properties:
        categoryName:
          type: array
          enum: [Business, Eduction, Private]
          example: [Business, Eduction, Private]

    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string

  requestBodies:
    CustomerAuth:
      description: Customer
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/CustomerAuth"
    AddRemoveExample:
      description: AddRemoveExample
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/AddRemoveExample"
    VerifyCOde:
      description: Customer
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/VerifyCOde"
    VerifyCOdeExample:
      description: Customer
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/VerifyCOdeExample"
    NewPassword:
      description: Customer
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/NewPassword"
    User:
      description: User
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/User"
    Group:
      description: Group
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/Group"
    Collection:
      description: Collection
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/Collection"
    Category:
      description: Category
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/Category"
    ShareFile:
      description: ShareFile
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/ShareFile"
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
